/****************************************************************************************************
 * src/technology.service.ts
 *    技術に関するデータ管理を行うサービス
 ****************************************************************************************************/

/* --------------------------------------------------------------------------------------------------
 * import構文
 *    import { インポートするクラス as 別名 } from 'インポート元モジュール';
 * ------------------------------------------------------------------------------------------------ */

import { Injectable } from '@angular/core';

/* ...................................................................................................
 * APIアクセス関連モジュールのインポート
 * ................................................................................................ */
import { HttpClient, HttpHeaders } from '@angular/common/http';

/* ...................................................................................................
 * RxJS(Reactive Extensions for JavaScript)関連モジュールのインポート
 *    JavaScriptで「いつ起こるかわからない処理」を行う為のモジュール
 * ................................................................................................ */
import { Observable } from 'rxjs/Observable';
import { of } from 'rxjs/observable/of';
import { catchError, map, tap } from 'rxjs/operators';

import { Technology } from './technology';          // 技術クラス
import { MessageService } from './message.service';

/* --------------------------------------------------------------------------------------------------
 * 定数定義
 *    const 定数名: 型 = 設定値;
 * ------------------------------------------------------------------------------------------------ */
/* ...................................................................................................
 * HTTP通信におけるオプションを設定
 * ................................................................................................ */
const httpOptions = {
  headers: new HttpHeaders({'Content-Type': 'application/json'})
};

/* --------------------------------------------------------------------------------------------------
 * @Injectable
 *    コンポーネントに対してサービスを引き渡せることを意味するデコレーター
 *    providedIn:   インスタンス1つに対する単位を指定する(rootの場合、全体で1つのインスタンス)
 * ------------------------------------------------------------------------------------------------ */

@Injectable()

/* --------------------------------------------------------------------------------------------------
 * クラス定義
 *    export class クラス名 { }
 *    ※exportを付けると、他クラスから参照(import)可能となる
 * ------------------------------------------------------------------------------------------------ */

export class TechnologyService {
  /* --------------------------------------------------------------------------------------------------
  * フィールド定義
  *    フィールド名: 型名;
  *    ※使用できる主な型は、
  *     ・any       型指定なし
  *     ・number    数値(浮動小数含む)
  *     ・boolean   真偽値
  *     ・string    文字列
  *     ・enum      列挙
  *    ※配列は、型[]／Array<型> で指定
  *    ※タプルは、[型, 型, …]
  *    ※アクセス修飾子は、private、public、protected、記述なし
  * ------------------------------------------------------------------------------------------------ */
  private technologiesUrl = 'api/technologies';

  /* --------------------------------------------------------------------------------------------------
   * コンストラクター
   *    constructor(アクセス修飾子 引数(フィールド)名:引数(フィールド)型)
   *    ※引数であると同時に、フィールドの宣言および代入も兼ねている
   * ------------------------------------------------------------------------------------------------ */
  constructor(
    private http: HttpClient,
    private messageService: MessageService
  ) {
  }

  getTechnologies(): Observable<Technology[]> {
    /* ...................................................................................................
     * technologiesUrlに対してHTTPのGETリクエストを行い、結果をTechnology[]に格納する
     * ................................................................................................ */
    return  this.http.get<Technology[]>(this.technologiesUrl).pipe(
      tap(technologies => this.log('データを取得')),
      catchError(this.handleError('getTechnologies', []))
    );
  }

  getTechnology(id: number): Observable<Technology> {
    const url = '${this.technologiesUrl}/${id}';

    /* ...................................................................................................
     * urlに対してHTTPのGETリクエストを行い、結果をTechnologyに格納する
     * ................................................................................................ */
    return  this.http.get<Technology>(url).pipe(
      tap(_ => this.log('番号${id}のデータを取得'),
      catchError(this.handleError<Technology>('getTechnology 番号=${id}')))
    );
  }

  updateTechnology(tech: Technology): Observable<any> {
    /* ...................................................................................................
     * technologiesUrlに対してHTTPの渡されたtechPUTリクエストを行う
     * ................................................................................................ */
    return  this.http.put(this.technologiesUrl, tech, httpOptions).pipe(
      tap(_ => this.log('番号${tech.id}のデータを変更')),
      catchError(this.handleError<any>('updateTechnology'))
    );
  }

  private handleError<T>(operation = 'operation', result?: T) {
    return  (error: any): Observable<T> => {
      console.error(error);
      this.log('${operation} failed: ${error.message}');
      return  of(result as T);
    };
  }

  private log(message: string) {
    this.messageService.add('TechnologyService: ' + message);
  }
}
